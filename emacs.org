#+TITLE: Emacs Configuration
#+JEKYLL_TAGS: emacs
#+DATE: 2020-02-23
#+PROPERTY: header-args :results silent

* Preface
This is my literate Emacs configuration, written in org-mode and exported with [[https://github.com/gonsie/ox-jekyll-md][ox-jekyll-md]]. You can see the raw, un-exported version on my [[https://github.com/kylerjohnston/emacs.d][emacs.d GitHub repo]]. Take a look at [[https://github.com/kylerjohnston/emacs.d/blob/066ef819f41061230da541a5a6c481cd7c647409/init.el][init.el]] there, which is first read by Emacs and does some basic bootstrapping, setting up package archives and ~use-package~, and then calls ~org-babel-load-file~ on ~emacs.org~, the unexported version of this file, which pulls all the Emacs Lisp source blocks from this file, stitches them into an Emacs Lisp file called ~emacs.el~, and executes it.

This is my third or fourth Emacs configuration. I was a vim user but started using Emacs in grad school, some time around 2015 I think, when I discovered org-mode. I started out using [[https://www.spacemacs.org/][Spacemacs]] then, but quickly got overwhelmed by how much /stuff/ there was in it and moved to vanilla Emacs. Here is [[https://github.com/kylerjohnston/dot-files/blob/ec3061b62d44a221bdb20a336b6da46430c352fd/emacs/.emacs.d/init.el][my last vanilla Emacs config]], which probably grew out of that move. In the summer of 2019 I switched to [[https://github.com/hlissner/doom-emacs][doom-emacs]] and loved it --- most of the defaults were sane and I felt like it showed the power and extensibility of Emacs without overwhelming me by forcing me to do things its way, like Spacemacs did.

I decided to roll my own config again because I started having to fight Doom Emacs defaults to make things work the way I wanted, and with each update of Doom there'd be more changes I'd have to make to my ~config.el~ to keep my config working. Doom had introduced me to some new Emacs programs that I loved, like [[https://magit.vc/][Magit]] and [[https://github.com/abo-abo/swiper][Ivy]], but had a lot of features I didn't use. Doom, as a project, has to target everyone --- I just need a config that works for me.

This config is an active work in progress, and this web page is a living document of it. Eventually I'd like to set up a hook to export the web page whenever I push changes to ~emacs.org~, but right now it is generated by manually running /C-c C-e P p/ to export the project (see [[*Publishing][Publishing]]), so it may not always be up to date.
* UI and basic configuration
Disable blinking cursors and scroll bars and tool bars and menus, show line numbers:
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0)
  (menu-bar-mode 0)
  (global-display-line-numbers-mode)
  (global-hl-line-mode 1) ;; highlight current line
  (add-to-list 'default-frame-alist
               '(fullscreen . maximized)) ;; open new frames full screen
#+END_SRC

Stop cluttering working directories with back up files and save them to ~/tmp/~. Everything is under version control anyway, right?
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Fonts
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Source Code Pro Medium:pixelsize=15:foundry=ADBO:weight=normal:slant=normal:width=normal:spacing=100:scalable=true"))
#+END_SRC

** Doom Themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-tomorrow-night t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

** Which Key to find keybindings
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

* Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line))
#+END_SRC

* Org mode
** Agenda 
Org agenda files are saved ~$HOME/org~ and archived under ~archive/archive-$(date)~.
#+BEGIN_SRC emacs-lisp
  (setq-default org-agenda-files (quote ("~/org")))
  (setq org-directory "~/org")
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-archive-location (concat "archive/archive-" (format-time-string "%Y%m" (current-time)) ".org_archive::"))
#+END_SRC

Configure TODO keywords:

#+BEGIN_SRC emacs-lisp
(setq-default org-todo-keywords
              '((sequence "TODO(t)" "IN PROGRESS(p)" "WAITING(w)" "|" "DONE(d)" "CLOSED(c)")))
(setq org-todo-keyword-faces
      '(("IN PROGRESS" warning bold)
        ("WAITING" error bold)
        ("CLOSED" org-done)))
#+END_SRC

Add a timestamp when you close a task:

#+BEGIN_SRC emacs-lisp
(setq-default org-log-done 'time)
#+END_SRC
** UI/UX
Soft-wrap lines, and don't do it mid-word.

#+BEGIN_SRC emacs-lisp
(setq-default org-startup-truncated nil)
(add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC

Use indentation, not extra \*s for headings.

#+BEGIN_SRC emacs-lisp
(setq-default org-startup-indented t)
#+END_SRC

Don't let org edit things under collapsed headings.

#+BEGIN_SRC emacs-lisp
(setq-default org-catch-invisible-edits 'smart)
#+END_SRC

Keybindings:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)
#+end_src

Custom link abbreviations:
#+begin_src emacs-lisp
  (setq org-link-abbrev-alist
        '(
          ("jira" . "https://cashstar.atlassian.net/browse/")))
#+end_src

** Babel
By default Babel will only allow you to execute ~emacs-lisp~ source code blocks. You can enable Babel to allow execution of code blocks in a bunch of different languages though --- a full list is here: https://orgmode.org/manual/Languages.html#Languages
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (ruby . t)
     (dot . t)))
#+end_src

** Exporting and publishing
This sets up Jekyll markdown export for my blog. See [[https://orgmode.org/worg/org-tutorials/org-jekyll.html][this post on orgmode.org]].

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
  (use-package ox-jekyll-md
    :ensure t
    :config
    (setq org-jekyll-md-use-todays-date nil)
    (setq org-jekyll-md-include-yaml-front-matter t))
  (require 'ox)
  (require 'ox-publish)
  (setq org-publish-project-alist
        '(("muumuus"
           :base-directory "~/muumuus/org/"
           :publishing-directory "~/muumuus/_posts"
           :base-extension "org"
           :recursive t
           :publishing-function org-jekyll-md-publish-to-md
           :headline-levels 4
           :with-toc nil ; don't export a table of contents
           :section-numbers nil)
          ("emacs"
           :base-directory "~/.emacs.d/"
           :publishing-directory "~/muumuus/_pages/"
           :base-extension "org"
           :recursive nil
           :publishing-function org-jekyll-md-publish-to-md
           :headline-levels 4
           :with-toc t
           :section-numbers nil)))
#+end_src

** Capture templates
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        '(("b" "Blog" entry (file+headline "~/org/inbox.org" "Blog ideas")
           "* TITLE\n#+TITLE:\n#+DATE: %t\n#+JEKYLL_TAGS:\n#+JEKYLL_LAYOUT: post\n\n%?")
          ("d" "Divide and Conquer: Algorithms on Coursera"
           entry (file+headline "~/org/inbox.org" "Divide and Conquer: Algorithms on Coursera")
           "* %^{Title}\n#+DATE: %t\n\n%?")))
#+end_src

* Dired
Make it so if you have split windows, both with dired buffers, and you perform a rename or copy action on an item in one dired buffer, its default target is the other dired buffer.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC

Evil keybindings:
#+begin_src emacs-lisp
(evil-set-initial-state 'dired-mode 'normal)
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :bind
    (:map company-active-map
          ("<return>" . nil)
          ("C-<return>" . company-complete-selection))
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (setq company-auto-complete 'company-explicit-action-p))
#+end_src

* Languages
** Language Server Protocol configuration
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  (use-package lsp-mode
    :init (setq lsp-keymap-prefix "C-c m")
    :hook (
           (ruby-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :config (setq read-process-output-max (* 1024 1024)))

  (use-package company-lsp
    :ensure t
    :commands company-lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)

  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)
#+end_src

** Ansible
#+begin_src emacs-lisp
  (use-package ansible
    :ensure t
    :config
    (add-hook 'yaml-mode-hook '(lambda () (ansible 1))))

  (use-package company-ansible
    :ensure t
    :config
    (add-to-list 'company-backends 'company-ansible))
#+end_src

** GraphViz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src
** LaTeX
Recognize ~.latex~ files as... LaTeX.
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist (cons '("\\.latex$" . latex-mode) auto-mode-alist))
#+END_SRC
** Python
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+end_src

** SaltStack
#+begin_src emacs-lisp
  (use-package salt-mode
    :ensure t
    :config
    (add-hook 'salt-mode-hook
              (lambda ()
                (flyspell-mode 1)))
    (add-to-list 'auto-mode-alist '("\\.sls\\'" . salt-mode)))
#+end_src

** Shell
#+begin_src emacs-lisp
  (use-package flymake-shellcheck
    :commands flymake-shellcheck-load
    :init
    (add-hook 'sh-mode-hook 'flymake-shellcheck-load))
#+end_src

** Terraform
#+begin_src emacs-lisp
(use-package terraform-mode
  :ensure t)
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :ensure t)
  (use-package evil-magit
    :ensure t)
  (require 'evil-magit)
#+end_src

* Diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

* Ivy/Counsel/Swiper
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :diminish ivy-mode
    :bind (("C-s" . swiper-isearch)
           ("M-x" . counsel-M-x)
           ("C-c k" . counsel-rg))
    :init
    (ivy-mode 1)
    (counsel-mode 1)
    :config
    (setq ivy-use-virtual-buffers t))
#+end_src

* Start Emacs server
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

* References
These are sources I've used to build my emacs configuration:
- My old emacs config: https://github.com/kylerjohnston/dot-files/blob/971496d42a1b7c65f28114442a5742a561b1e4f2/emacs/.emacs.d/init.el
- My doom config: https://github.com/kylerjohnston/ansible/blob/186986a6aa58bfc14f55a69c34554605c3a7178d/roles/graphical/files/config.el
- https://github.com/angrybacon/dotemacs/
- https://github.com/hlissner/doom-emacs
